<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<title>SQL Notepad</title>
<meta name="viewport" content="width=device-width,initial-scale=1" />
<style>
:root {
  --bg:#0f172a;
  --bg2:#0b1327;
  --panel:#0d1326;
  --editor:#0b1020;
  --fg:#e5e7eb;
  --muted:#94a3b8;
  --border:#1f2a44;
  --accent:#d9534f;
  --accent-hover:#c9302c;
  --pill:#111827;
}
[data-theme="light"] {
  --bg:#f8fafc;
  --bg2:#eef2f7;
  --panel:#ffffff;
  --editor:#ffffff;
  --fg:#0f172a;
  --muted:#475569;
  --border:#d1d5db;
  --accent:#0ea5e9;
  --accent-hover:#0284c7;
  --pill:#e5e7eb;
}

* { box-sizing: border-box; }
html, body { height: 100%; }
body {
  font-family: Arial, sans-serif;
  display: grid;
  /* 4 rows: header, menubar, toolbar (.bar), content (.wrap) */
  grid-template-rows: auto auto auto 1fr;
  background: var(--bg);
  color: var(--fg);
  min-height: 100vh;
}

/* When interface is hidden, drop the bar row (header + menubar + content) */
body.interface-hidden { grid-template-rows: auto auto 1fr; }

header {
  padding: 16px 20px;
  background: var(--bg);
  border-bottom: 1px solid var(--border);
}
body.interface-hidden header { padding: 6px 12px; }
header h1 { margin: 0 0 6px; font-size: 20px; }
header p { margin: 0; font-size: 14px; color: var(--muted); min-height: 1.4em; }
kbd {
  background: var(--pill);
  border: 1px solid var(--border);
  border-bottom-width: 2px;
  border-radius: 6px;
  padding: 2px 6px;
  font-family: inherit;
  font-size: 12px;
  color: var(--fg);
}

/* ===== Toolbar (.bar) ===== */
.bar {
  grid-row: 3;                 /* sits on the 3rd (auto) row */
  display:flex; gap:8px; align-items:center;
  padding:8px 20px;
  background: var(--bg2); color: var(--fg);
  border-bottom:1px solid var(--border);
  height:auto;                 /* ensure intrinsic height */
  line-height:1.2;
  flex-wrap: wrap;
}
body.interface-hidden .bar { display:none; }

.bar .right {
  margin-left:auto; display:flex; gap:8px; align-items:center; flex-wrap:nowrap;
  white-space:nowrap;
}
.pill {
  background: var(--pill);
  padding: 4px 8px;
  border-radius: 999px;
  font-size: 12px;
  border: 1px solid var(--border);
}
.bar button {
  padding:8px 10px; font-size:14px; cursor:pointer; border:none; color:white;
  background: var(--accent); border-radius:8px;
}
.bar button.secondary {
  background: transparent; color: var(--fg);
  border: 1px solid var(--border);
}
.bar button:hover { background: var(--accent-hover); }
.bar button.secondary:hover { background: var(--panel); }

/* ===== Main wrap/content ===== */
.wrap {
  grid-row: 4;                 /* the filling row */
  display:grid; grid-template-columns: 300px 1fr; gap:0; height: 100%;
  min-height: 0; /* allow child to stretch correctly */
}
.wrap.board-hidden { grid-template-columns: 1fr; }

/* FIX: place .wrap on row 3 when interface is hidden so it fills the 3rd track */
body.interface-hidden .wrap { 
  grid-row: 3; 
  grid-template-columns: 1fr !important; 
}

aside.panel {
  background: var(--panel); border-right:1px solid var(--border);
  display:flex; flex-direction:column;
}
aside.panel.hidden { display:none; }
body.interface-hidden aside.panel { display:none !important; }
/* (grid columns are already collapsed above for hidden mode) */

aside.panel h2 { margin: 12px 12px 4px; font-size:14px; color: var(--fg); font-weight:600; }
aside.panel small { margin: 0 12px 8px; color: var(--muted); }
#board {
  margin: 0 12px 12px; flex:1; resize:none; width: calc(100% - 24px);
  background: var(--editor); color: var(--fg); border:1px solid var(--border);
  border-radius:8px; padding:10px;
  font-family: ui-monospace, Menlo, Consolas, monospace; font-size:13px; line-height:1.4;
}
.panel .row { display:flex; gap:8px; padding:0 12px 12px; }
.panel .row button { flex:1; }

textarea#textArea {
  width: 100%; height: 100%;
  font-size: 16px; padding: 14px; border: none; outline: none;
  background: var(--editor); color: var(--fg);
  font-family: ui-monospace, Menlo, Consolas, monospace;
}
body.interface-hidden textarea#textArea { margin-left: 12px; }

/* ===== Modal shared styles ===== */
.overlay {
  position: fixed; inset: 0; background: rgba(0,0,0,0.5);
  display: none; align-items: center; justify-content: center; z-index: 9999;
}
.dialog {
  width: 720px; max-width: 95%; padding: 16px;
  border-radius: 12px; background: var(--panel); color: var(--fg);
  border: 1px solid var(--border); font-family: Arial, sans-serif;
  box-shadow: 0 10px 30px rgba(0,0,0,0.35);
}
.dialog .title { font-size: 16px; font-weight: 700; margin-bottom: 6px; }
.dialog .hint { font-size: 13px; color: var(--muted); margin-bottom: 10px; }
.dialog .row { display:flex; flex-wrap:wrap; gap:10px; margin-bottom:12px; }
.dialog label { font-size: 14px; display:flex; align-items:center; gap:6px; }
.dialog input[type="number"], .dialog select {
  padding: 8px; border-radius: 8px; border: 1px solid var(--border);
  background: var(--editor); color: var(--fg);
}
.dialog .btns { display:flex; gap:8px; justify-content:flex-end; margin-top: 8px; }
.dialog button {
  padding:10px 12px; border-radius:8px; cursor:pointer;
  border:1px solid var(--border); background: var(--bg2); color: var(--fg);
}
.dialog button.primary { border:none; background: var(--accent); color:#fff; }
.dialog button.primary:hover { background: var(--accent-hover); }

.divider { height:1px; background: var(--border); margin: 12px 0; }

.icon { display:inline-flex; align-items:center; gap:6px; }
.icon svg { width:16px; height:16px; vertical-align:middle; }

.about-list { line-height: 1.6; font-size: 14px; color: var(--fg); }
.about-list kbd { font-size: 12px; }

/* ===== Duplicate end token highlighter overlay ===== */
#highlightOverlay {
  position: fixed;
  inset: auto auto auto auto; /* set dynamically via JS to match the textarea */
  pointer-events: none;
  white-space: pre-wrap;
  word-break: break-word;
  overflow: hidden;
  z-index: 999; /* under modals, over editor */
  color: transparent; /* base text hidden */
}

/* Safety button to restore UI when hidden */
#showControlsBtn {
  position: fixed;
  top: 12px;
  right: 8px;
  z-index: 10000;
  display: none;
  background: var(--accent);
  color: #fff;
  border: none;
  border-radius: 8px;
  padding: 8px 10px;
  cursor: pointer;
  box-shadow: 0 4px 12px rgba(0,0,0,.25);
}

/* === Duplicate End Tokens Modal === */
#dupesListWrap { border:1px solid var(--border); border-radius:10px; background:var(--editor); }
#dupesHeader { display:flex; align-items:center; justify-content:space-between; gap:8px; margin-bottom:8px; }
#dupesCount { font-size:13px; color:var(--muted); }
#dupesSearch {
  width:240px; padding:8px 10px; border-radius:8px; border:1px solid var(--border);
  background:var(--bg2); color:var(--fg);
}
#dupesList {
  max-height: 360px; overflow:auto; padding:6px;
  border-top:1px dashed var(--border);
}
.dupeItem {
  display:flex; align-items:center; justify-content:space-between; gap:10px;
  padding:8px 10px; border-bottom:1px dashed var(--border);
}
.dupeItem:last-child { border-bottom:none; }
.dupeToken { font-family: ui-monospace, Menlo, Consolas, monospace; word-break:break-all; }
.dupeBadge {
  background: var(--pill); border:1px solid var(--border);
  border-radius:999px; padding:2px 8px; font-size:12px;
}
.dupeActions { display:flex; gap:6px; }
.dupeBtn {
  padding:6px 8px; border-radius:8px; cursor:pointer;
  border:1px solid var(--border); background:var(--bg2); color:var(--fg);
}
.dupeBtn:hover { background: var(--panel); }

/* ===== Scoped Menubar (kept from your version) ===== */
.menubar{
  background: var(--bg2);
  border-bottom: 1px solid var(--border);
  padding: 0 8px;
  position: sticky; top: 0;
  z-index: 150;
}
.appmenu-root{ list-style:none; margin:0; padding:0; display:flex; gap:6px; }
.appmenu-item{ position:relative; }
.appmenu-trigger{
  background:transparent; color:var(--fg);
  border:1px solid transparent;
  padding:6px 8px; border-radius:6px; cursor:pointer; font-size:13px;
}
.appmenu-trigger:hover, .appmenu-trigger:focus{
  background:var(--panel);
  border-color: var(--border);
  outline:none;
}

.appmenu{
  position:absolute; top:100%; left:0; min-width:190px;
  background:var(--panel); border:1px solid var(--border);
  border-radius:8px; padding:4px; margin-top:4px; display:none;
  box-shadow: 0 6px 16px rgba(0,0,0,.25);
  z-index: 160;
}
.appmenu.show{ display:block; }

.appmenu li{ list-style:none; }
.appmenu button[role="menuitem"]{
  display:block; width:100%; text-align:left;
  background:transparent; color:var(--fg); border:none;
  padding:6px 8px; border-radius:6px; cursor:pointer; font-size:13px;
}
.appmenu button[role="menuitem"]:hover{ background:var(--bg2); }

.appmenu-sep{ height:1px; background:var(--border); margin:4px; border-radius:1px; }

/* Nested submenu */
.appmenu-nested{ position:relative; }
.appmenu-trigger.nested{
  display:flex; justify-content:space-between; align-items:center; width:100%;
}
.appmenu-field{
  position:absolute;
  left:100%; top:0; margin-left:4px; min-width:190px;
  z-index: 170;
}

/* Mobile: stack */
@media (max-width:600px){
  .appmenu, .appmenu-field{
    position:fixed; left:12px; right:12px; top:auto; bottom:12px;
    margin:0; max-height:50vh; overflow:auto;
  }
}

.scopeInput{
  min-width:120px; max-width:220px;
  padding:8px 10px; border-radius:8px; border:1px solid var(--border);
  background: var(--editor); color: var(--fg); outline: none;
}
.scopeInput:empty:before{ content: attr(data-ph); color: var(--muted); }

/* List Extractor small tweaks (reuses .overlay and .dialog) */
#list-extractor-modal .title { margin-bottom: 6px; }
#list-extractor-modal .hint { margin-bottom: 8px; }
#le_result { white-space: pre; }

/* Field Swapper modal styles (scoped by #field-swapper-modal) */
  #field-swapper-modal .title { margin-bottom: 6px; }
  #field-swapper-modal .hint { margin-bottom: 8px; }

  .fs-list-wrap {
    border: 1px solid var(--border);
    background: var(--editor);
    border-radius: 10px;
    padding: 6px;
  }
  .fs-list {
    max-height: 320px;
    overflow: auto;
    margin: 0;
    padding: 0;
    list-style: none;
  }
  .fs-item {
    display: grid;
    grid-template-columns: 24px 64px 1fr;
    align-items: center;
    gap: 8px;
    padding: 8px;
    border-radius: 8px;
    border: 1px dashed transparent;
    user-select: none;
  }
  .fs-item + .fs-item { margin-top: 6px; }
  .fs-item[draggable="true"] { cursor: grab; }
  .fs-item.dragging { opacity: 0.6; }
  .fs-item.drop-before { border-color: var(--accent); }
  .fs-item.drop-after  { border-color: var(--accent); }

  .fs-handle {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }
  .fs-num {
    font: 12px/1 ui-monospace, Menlo, Consolas, monospace;
    color: var(--muted);
    background: var(--pill);
    border: 1px solid var(--border);
    border-radius: 8px;
    padding: 4px 8px;
    text-align: center;
  }
  .fs-name[contenteditable="true"] {
    min-height: 28px;
    padding: 6px 8px;
    border-radius: 8px;
    border: 1px solid var(--border);
    background: var(--bg2);
    outline: none;
  }
  .fs-name[contenteditable="true"]:empty:before {
    content: attr(data-ph);
    color: var(--muted);
  }
  
    /* Scoped to error-handling only */
  #error-handling-modal .dialog .title { margin-bottom: 6px; }
  #error-handling-modal #ehListWrap {
    border:1px solid var(--border);
    background: var(--editor);
    border-radius: 10px;
    max-height: 360px;
    overflow:auto;
    padding: 6px;
  }
  #error-handling-modal .eh-list {
    list-style: none;
    margin: 0;
    padding: 0;
  }
  #error-handling-modal .eh-item {
    display: grid;
    grid-template-columns: auto 1fr auto;
    align-items: start;
    gap: 10px;
    padding: 8px;
    border-bottom: 1px dashed var(--border);
  }
  #error-handling-modal .eh-item:last-child { border-bottom: none; }

  #error-handling-modal .eh-badge {
    border: 1px solid var(--border);
    background: var(--pill);
    border-radius: 999px;
    padding: 2px 8px;
    font-size: 12px;
    line-height: 1.4;
    white-space: nowrap;
  }
  #error-handling-modal .eh-badge.error { color: #fff; background: #b91c1c; border-color:#7f1d1d; }
  #error-handling-modal .eh-badge.warn  { color: #111; background: #fbbf24; border-color:#b45309; }

  #error-handling-modal .eh-msg {
    font-size: 14px;
    line-height: 1.45;
  }
  #error-handling-modal .eh-loc {
    font-size: 12px;
    color: var(--muted);
    white-space: nowrap;
  }

/* Append/Prepend (scoped) */
#append-prepend-modal .title { margin-bottom: 6px; }
#append-prepend-modal .hint { margin-bottom: 8px; }
#append-prepend-modal input[type="number"],
#append-prepend-modal input[type="text"],
#append-prepend-modal select {
  padding: 8px; border-radius: 8px; border: 1px solid var(--border);
  background: var(--editor); color: var(--fg);
}

/* Template Maker (scoped) */
#template-maker-modal .title { margin-bottom: 6px; }
#template-maker-modal .dialog .hint { margin-bottom: 10px; }

#field-paste-modal .title { margin-bottom: 6px; }
#field-paste-modal .hint { margin-bottom: 8px; }
#field-paste-modal input[type="number"],
#field-paste-modal input[type="text"]{
padding: 8px; border-radius: 8px; border: 1px solid var(--border);
background: var(--editor); color: var(--fg);
}

#set-field-modal .modal-scroll {
  max-height: 400px;   /* adjust to fit nicely */
  overflow-y: auto;
  padding-right: 6px;  /* space for scrollbar */
  margin-bottom: 12px; /* space before footer */
}

/* Show the safety button when hidden */
body.interface-hidden #showControlsBtn { display: inline-block; }


</style>
</head>
<body data-theme="light">
  <header>
    <h1>SQL Notepad</h1>
    <p>&nbsp;</p>
  </header>
  <!-- === Top Software Menu (scoped) === -->
<nav class="menubar" aria-label="App menu">
  <ul class="appmenu-root">
    <li class="appmenu-item">
      <button class="appmenu-trigger" data-menu="file">File</button>
      <ul class="appmenu appmenu-file" role="menu">
        <li><button id="mnuNewDoc"      role="menuitem">New</button></li>
        <li><button id="mnuImportBoard" role="menuitem">Import to Copy Board</button></li>
        <li><button id="mnuClearBoard"  role="menuitem">Clear Copy Board</button></li>
        <li class="appmenu-sep" aria-hidden="true"></li>
        <li><button id="mnuToggleBoard" role="menuitem">Hide/Show Copy Board</button></li>
        <li><button id="mnuToggleUI"    role="menuitem">Toggle Interface (Ctrl+S)</button></li>
      </ul>
    </li>

    <li class="appmenu-item">
      <button class="appmenu-trigger" data-menu="tools">Tools</button>
      <ul class="appmenu appmenu-tools" role="menu">
        <li><button id="mnuTokenizer" role="menuitem">Tokenizer</button></li>
        <li><button id="mnuMath"      role="menuitem">Math</button></li>

        <!-- Nested submenu: Field ▸ -->
        <li class="appmenu-nested">
          <button class="appmenu-trigger nested" data-menu="field">Field ▸</button>
          <ul class="appmenu appmenu-field" role="menu">
            <li><button id="mnuFieldAdd"    role="menuitem">Add Field</button></li>
            <li><button id="mnuFieldRemove" role="menuitem">Remove Field</button></li>
            <li><button id="mnuFieldSet"    role="menuitem">Set Field</button></li>
			<li><button id="mnuFieldSwapper" role="menuitem">Swapper</button></li>
			<li><button id="mnuFieldAppendPrepend" role="menuitem">Append/Prepend</button></li>
			<li><button id="mnuFieldPaste" role="menuitem">Paste</button></li>
          </ul>
        </li>

        <li class="appmenu-sep" aria-hidden="true"></li>
        <li><button id="mnuListExtractor" role="menuitem">List Extractor</button></li>
		<li><button id="mnuTemplateMaker" role="menuitem">Template Maker</button></li>
		<li><button id="mnuErrorHandling" role="menuitem">Debugger</button></li>
      </ul>
    </li>

    <li class="appmenu-item">
      <button class="appmenu-trigger" data-menu="help">Help</button>
      <ul class="appmenu appmenu-help" role="menu">
        <li><button id="mnuHelp" role="menuitem">Help</button></li>
      </ul>
    </li>

    <li class="appmenu-item">
      <button class="appmenu-trigger" data-menu="about">About</button>
      <ul class="appmenu appmenu-about" role="menu">
        <li><button id="mnuAbout" role="menuitem">About</button></li>
      </ul>
    </li>
  </ul>
</nav>
  <div class="bar">
    <span class="pill" id="countPill">Copy Board: 0 items</span>
    <span class="pill" id="rowsCountPill">Set: 0 rows</span>
	<span class="pill" id="setNumPill">Set: 0 #</span>
    <button id="importBtn" class="secondary" title="Import text from system clipboard">Import Clipboard</button>
	
    <button id="tokenizeBtn"   title="Replace last field in every tuple with a unique token">Tokenizer</button>
    <button id="nthFieldRemover" title="Remove the n’th field (1-based) from every tuple">Remove Field</button>
    <button id="addFieldBtn" title="Add a new field across all tuples">Add Field</button>
    <button id="mathButton"    title="Open math tools for field operations">Math</button>

    <div class="right">
      <button id="toggleBoardBtn" class="secondary" title="Hide/Show Copy Board">Hide Copy Board</button>
      <!-- Help button (book icon) -->
      <button id="helpBtn" class="secondary" title="About / Help">
        <span class="icon">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
               stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
            <path d="M4 4h16v15H6.5A2.5 2.5 0 0 0 4 21.5z"></path>
          </svg>
          Help
        </span>
      </button>

      <button id="settingsBtn" class="secondary" title="Settings">
        <span class="icon">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
               stroke-linecap="round" stroke-linejoin="round" aria-hidden="true">
            <circle cx="12" cy="12" r="3"></circle>
            <path d="M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 1 1-2.83 2.83l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-4 0v-.09a1.65 1.65 0 0 0-1-1.51 1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 1 1-2.83-2.83l.06-.06a2 2 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1 0-4h.09c.17 0 .35-.03 .51-.1 .61-.25 1-.85 1-1.51V9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 1 1 2.83-2.83l.06 .06c.51 .51 1.23 .66 1.82 .33H9c.66 0 1.26-.39 1.51-1V3a2 2 0 0 1 4 0v.09c.25 .61 .85 1 1.51 1h.09c.59 .33 1.31 .18 1.82-.33l.06-.06a2 2 0 1 1 2.83 2.83l-.06 .06c-.51 .51-.66 1.23-.33 1.82V9c0 .66 .39 1.26 1 1.51 .16 .07 .34 .1 .51 .1H21a2 2 0 0 1 0 4h-.09c-.17 0-.35 .03-.51 .1-.61 .25-1 .85-1 1.51z"></path>
          </svg>
          Settings
        </span>
      </button>
    </div>
  </div>

  <div class="wrap" id="mainWrap">
    <aside class="panel" id="leftPanel">
      <h2>Copy Board</h2>
      <small>Paste here (CSV, lines, or whitespace). Edits update the queue.</small>
      <textarea id="board" placeholder='Examples:
alpha, "New York", bravo
or one
per
line'></textarea>
      <div class="row">
        <button id="dedupeBtn" class="secondary">Dedupe</button>
        <button id="shuffleBtn" class="secondary">Shuffle</button>
      </div>
    </aside>

    <textarea id="textArea" placeholder="Paste or type SQL here…"></textarea>
  </div>

  <!-- Highlighter overlay & safety show-controls button -->
  <div id="highlightOverlay" aria-hidden="true"></div>
  <button id="showControlsBtn" title="Show Controls">Show Controls</button>

  <!-- Remove n’th Field Modal -->
  <div class="overlay" id="nth-remover-modal">
    <div class="dialog">
      <div class="title">Remove n’th Field</div>
      <div class="hint">Enter a <b>1-based</b> field index (1 = first field). Removes that field from all tuples.</div>
      <div class="row">
        <label>Field #
          <input type="number" id="nthIndexInput" min="1" value="1" style="width:90px;">
        </label>
      </div>
      <div class="btns">
        <button id="nthCancelBtn">Cancel</button>
        <button id="nthApplyBtn" class="primary">Remove Field</button>
      </div>
    </div>
  </div>

  <!-- Add Field Modal -->
  <div class="overlay" id="add-field-modal">
    <div class="dialog">
      <div class="title">Add Field</div>
      <div class="hint">Choose field type and where to insert it. Fields are <b>1-based</b>.</div>
      <div class="row">
        <label><input type="radio" name="newFieldType" value="number" checked> Number (0)</label>
        <label><input type="radio" name="newFieldType" value="string"> String ('')</label>
      </div>
      <div class="row">
        <label>Insert after field #
          <input type="number" id="addAfterInput" min="0" value="0" style="width:90px;">
        </label>
        <small class="hint">Use 0 to insert at the beginning.</small>
      </div>
      <div class="btns">
        <button id="addFieldCancelBtn">Cancel</button>
        <button id="addFieldApplyBtn" class="primary">Add Field</button>
      </div>
    </div>
  </div>

  <!-- Math Modal -->
  <div class="overlay" id="math-modal">
    <div class="dialog">
      <div class="title">SQL Field Math</div>

      <div class="hint">Result: <b>Target = Number (op) Source</b> · Fields are <b>1-based</b> · Flip → <b>Source (op) Number</b></div>
      <div class="row" id="interfieldRow"></div>
      <div class="btns">
        <button id="applyInterfieldBtn" class="primary">Apply Interfield</button>
      </div>

      <div class="divider"></div>

      <div class="hint">Result: <b>Field = Field (op) Number</b> · Fields are <b>1-based</b> · Optional Flip → <b>Number (op) Field</b></div>
      <div class="row" id="fieldRow"></div>
      <div class="btns">
        <button id="applyFieldBtn" class="primary">Apply Field</button>
      </div>

      <div class="divider"></div>

      <div class="hint">Result: <b>Target = Field Ⓐ (op) Field Ⓑ</b> · Fields are <b>1-based</b></div>
      <div class="row" id="fieldFieldRow"></div>
      <div class="btns">
        <button id="applyFieldFieldBtn" class="primary">Apply Field Ⓐ (op) Field Ⓑ → Target</button>
        <button id="mathCloseBtn">Close</button>
      </div>

      <div class="divider"></div>

      <div class="title" style="font-size:14px; margin:0;">Apply to</div>
      <div class="row">
        <label><input type="checkbox" id="mathScopeSet" checked> Current set</label>
        <label><input type="checkbox" id="mathScopeDoc"> Whole document</label>
      </div>
    </div>
  </div>
<!-- Set Field Modal -->
<div class="overlay" id="set-field-modal">
  <div class="dialog">
    <div class="title">Set Field</div>
    <div class="hint">Fields are <b>1-based</b>. Apply to the current set (located at caret) or the whole document.</div>

    <!-- Scrollable tools area -->
    <div class="modal-scroll" style="max-height:400px; overflow-y:auto; padding-right:6px; margin-bottom:12px;">

      <!-- Apply scope -->
      <div class="divider"></div>
      <div class="title" style="font-size:14px; margin:0;">Apply to</div>
      <div class="row">
        <div id="setScopeInput" class="scopeInput" contenteditable="true" data-ph="doc or 1, 2, 3…">doc</div>
        <small class="hint" style="margin-top:11px;">Type <b>doc</b> for whole document, or a number of set (sets = rows separated by blank lines).</small>
      </div>

      <div class="divider"></div>

      <!-- Op A: target = X when Y = value -->
      <div class="title" style="font-size:14px;margin-bottom:6px;">Target field = value when other field equals</div>
      <div class="row">
        <label>Target field
          <input type="number" id="sf_target_when" min="1" value="1" style="width:90px;">
        </label>
        <label>Value type
          <select id="sf_val_when_type">
            <option value="string">String</option>
            <option value="number">Number</option>
          </select>
        </label>
        <label>Value
          <input type="text" id="sf_val_when" placeholder="'' or 0">
        </label>
        <label>When field
          <input type="number" id="sf_cond_field" min="1" value="1" style="width:90px;">
        </label>
        <label>Equals type
          <select id="sf_cond_type">
            <option value="string">String</option>
            <option value="number">Number</option>
          </select>
        </label>
        <label>Equals
          <input type="text" id="sf_cond_value" placeholder="match value">
        </label>
      </div>
      <div class="btns">
        <button id="sf_apply_when" class="primary">Apply</button>
      </div>

      <div class="divider"></div>

      <!-- Op B: target = X (unconditional) -->
      <div class="title" style="font-size:14px;margin-bottom:6px;">Target field = value (unconditional)</div>
      <div class="row">
        <label>Target field
          <input type="number" id="sf_target_all" min="1" value="1" style="width:90px;">
        </label>
        <label>Value type
          <select id="sf_val_all_type">
            <option value="string">String</option>
            <option value="number">Number</option>
          </select>
        </label>
        <label>Value
          <input type="text" id="sf_val_all" placeholder="'' or 0">
        </label>
      </div>
      <div class="btns">
        <button id="sf_apply_all" class="primary">Apply</button>
      </div>

      <div class="divider"></div>

      <!-- Op C: fields X..Y replaced with a string -->
      <div class="title" style="font-size:14px;margin-bottom:6px;">Fields X to Y replaced with string field</div>
      <div class="row">
        <label>From field
          <input type="number" id="sf_span_start" min="1" value="1" style="width:90px;">
        </label>
        <label>To field
          <input type="number" id="sf_span_end" min="1" value="2" style="width:90px;">
        </label>
        <label>Replacement string
          <input type="text" id="sf_span_text" placeholder="new value">
        </label>
      </div>
      <div class="btns">
        <button id="sf_apply_span" class="primary">Apply</button>
      </div>

      <div class="divider"></div>

      <!-- Op D: increment sequence tool -->
      <div class="title" style="font-size:14px;margin-bottom:6px;">Increment sequence into field</div>
      <div class="hint">Sets the chosen field in each row to a running number starting at <b>Start number</b>. Applies to the chosen scope (doc or set #).</div>
      <div class="row">
        <label>Field #
          <input type="number" id="sf_inc_field" min="1" value="1" style="width:90px;">
        </label>
        <label>Start number
          <input type="number" id="sf_inc_start" value="1" style="width:120px;">
        </label>
        <label>
          <input type="checkbox" id="sf_inc_continue">
          Continue across sets
        </label>
      </div>
      <div class="btns">
        <button id="sf_apply_inc" class="primary">Apply</button>
      </div>

    </div><!-- /.modal-scroll -->

    <!-- Fixed footer -->
    <div class="btns">
      <button id="sf_close">Close</button>
    </div>
  </div>
</div>
  <!-- Settings Modal -->
  <div class="overlay" id="settings-modal">
    <div class="dialog">
      <div class="title">Settings</div>
      <div class="hint">Personalize editor behaviors.</div>

      <div class="row">
		<label>
		  <input type="checkbox" id="clearLastField">
		  Clear last field on Ctrl+D duplicate line
		</label>
      </div>

      <div class="row">
        <label>
          <input type="checkbox" id="tokenizerReplaceAll">
          Tokenizer: replace <b>all</b> last fields (not just empty)
        </label>
      </div>

      <div class="divider"></div>

      <div class="title" style="font-size:14px; margin:0;">Token Style</div>
      <div class="hint">Affects <em>Tokenizer</em> and <em>Ctrl+G</em> token generation.</div>
      <div class="row">
        <label>Style
          <select id="tokenStyle">
            <option value="alnum">Alpha-numeric (A-z, 0-9)</option>
            <option value="alpha">Alpha only (A-z)</option>
            <option value="upper">Uppercase (A-Z)</option>
            <option value="lower">Lowercase (a-z)</option>
          </select>
        </label>
        <label>Length
          <input type="number" id="tokenLength" min="4" max="64" value="12" style="width:90px;">
        </label>
      </div>

      <div class="divider"></div>

      <div class="title" style="font-size:14px; margin:0;">Theme</div>
      <div class="row">
        <label>Theme
          <select id="themeSelect">
            <option value="light">Light</option>
            <option value="dark">Dark</option>
          </select>
        </label>
      </div>

      <div class="btns">
        <button id="settingsCloseBtn" class="primary">Done</button>
      </div>
    </div>
  </div>

  <!-- About / Help Modal -->
  <div class="overlay" id="about-modal">
    <div class="dialog">
      <div class="title">About SQL Notepad</div>
      <div class="hint">Keyboard shortcuts & features</div>
      <div class="about-list">
        <ul>
          <li><kbd>Ctrl</kbd>+<kbd>B</kbd> – collect selection to Copy Board (removes it from editor)</li>
          <li><kbd>Ctrl</kbd>+<kbd>I</kbd> – dump Copy Board items into the n’th field across tuples (field dump)</li>
          <li><kbd>Ctrl</kbd>+<kbd>G</kbd> – insert a unique random token at the caret</li>
          <li><kbd>Ctrl</kbd>+<kbd>D</kbd> – duplicate current line (down). If enabled in <em>Settings</em>, clears the <em>last field</em> on the duplicate</li>
          <li><kbd>Ctrl</kbd>+<kbd>R</kbd> – remove current line, crimping content upward</li>
		  <li><kbd>Ctrl</kbd>+<kbd>K</kbd> – Copy current field across all tuples in set</li>
          <li><kbd>Ctrl</kbd>+<kbd>Z</kbd>/<kbd>Ctrl</kbd>+<kbd>Y</kbd> – undo/redo snapshots (10-depth ring)</li>
		  <li><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>E</kbd> – Open duplicate token report</li>
		   <li><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>U</kbd> – Open debugging report</li>
		  <li><kbd>Ctrl</kbd>+<kbd>S</kbd> – toggle interface visibility (safety button also available)</li>
          <li><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>V</kbd> – import clipboard into Copy Board</li>
          <li><b>Tokenizer</b> – fills only empty last fields (<code>''</code> or <code>' '</code>) with unique tokens; optionally replace <em>all</em> last fields via <em>Settings</em></li>
          <li><b>Remove n’th Field</b> – removes a 1-based field index from every tuple</li>
          <li><b>Add Field</b> – inserts Number (<code>0</code>) or String (<code>''</code>) after the specified field index</li>
          <li><b>Math</b> – Interfield (Number & Field), Field Math (Field & Number), and Field vs Field → Target</li>
          <li><b>Copy Board</b> – accepts CSV, lines, or whitespace; includes Dedupe and Shuffle utilities. Item in double quotes will maintain comma.</li>
        </ul>
      </div>
      <div class="btns">
        <button id="aboutCloseBtn" class="primary">Close</button>
      </div>
    </div>
  </div>
  <!-- About Modal -->
<div class="overlay" id="about-info-modal">
  <div class="dialog">
    <div class="title">About SQL Notepad</div>
    <div class="hint">Software information</div>
    <div class="about-list">
      <p><b>Purpose:</b> This software is used to edit tuples with various tools and functions.</p>
      <p><b>Known limitation:</b> It has problems with apostrophes inside string fields; handle those tuples by hand.</p>
      <p><b>License:</b> This is MIT licensed software. Use for personal or any commercial uses.</p>
      <p><b>Credits:</b> Created by Jeremy Benson using GPT5. Created in 2025.</p>
      <p><b>Disclaimer:</b> Use at your own risk and be watchful of data.</p>
    </div>

    <div class="btns">
      <button id="aboutInfoCloseBtn" class="primary">Close</button>
    </div>
  </div>
</div>
<!-- Error Handling Modal -->
<div class="overlay" id="error-handling-modal" aria-modal="true" role="dialog">
  <div class="dialog">
    <div class="title">Error Handling</div>
    <div class="hint">Scan the current document for errors and warnings. Results are grouped as a scrollable list.</div>

    <div id="ehSummary" class="pill" style="display:inline-block; margin-bottom:8px;">—</div>

    <div id="ehListWrap">
      <ul id="ehList" class="eh-list" aria-live="polite"></ul>
    </div>

    <div class="btns" style="margin-top:10px;">
      <button id="ehRescanBtn" class="secondary">Rescan</button>
      <button id="ehCloseBtn" class="primary">Close</button>
    </div>
  </div>
</div>
<!-- Duplicate End Tokens Modal -->
<div class="overlay" id="dupes-modal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="dupesTitle">
    <div class="title" id="dupesTitle">Duplicate End Field Tokens</div>
    <div class="hint">Shows each end-field token that appears in <b>2+</b> tuples. List is de-duplicated.</div>

    <div id="dupesListWrap">
      <div id="dupesHeader" style="padding:8px 10px;">
        <span id="dupesCount">Scanning…</span>
        <input id="dupesSearch" type="text" placeholder="Filter tokens…">
      </div>
      <div id="dupesList" role="list"></div>
    </div>

    <div class="btns" style="margin-top:12px;">
      <button id="dupesCopyAllBtn" class="dupeBtn">Copy All</button>
      <button id="dupesCloseBtn" class="primary">Close</button>
    </div>
  </div>
</div>
<!-- List Extractor Modal -->
<div class="overlay" id="list-extractor-modal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="listExtractorTitle">
    <div class="title" id="listExtractorTitle">List Extractor</div>
    <div class="hint">Build a CSV list from a specific field across <b>doc</b> or a set number.</div>

    <div class="divider"></div>

    <!-- Scope (same pattern as Set Field modal) -->
    <div class="title" style="font-size:14px; margin:0;">Scope</div>
    <div class="row">
      <div id="listScopeInput" class="scopeInput" contenteditable="true" data-ph="doc or 1, 2, 3…">doc</div>
      <small class="hint" style="margin-top:11px;">Type <b>doc</b> for the whole document, or a 1-based set number.</small>
    </div>

    <div class="divider"></div>

    <!-- Field + output options -->
    <div class="row">
      <label>Field #
        <input type="number" id="le_field" min="1" value="1" style="width:90px;">
      </label>

      <label>Output
        <select id="le_output_mode">
          <option value="csv">Comma-separated (single line)</option>
          <option value="lines">One per line</option>
        </select>
      </label>

      <label>
        <input type="checkbox" id="le_trim" checked>
        Trim values
      </label>

      <label>
        <input type="checkbox" id="le_unique">
        Unique only
      </label>
    </div>

    <div class="divider"></div>

    <!-- Results -->
    <div class="row" style="width:100%;">
      <textarea id="le_result" readonly
        style="width:100%; min-height:160px; resize:vertical; background:var(--editor); color:var(--fg); border:1px solid var(--border); border-radius:8px; padding:10px; font-family: ui-monospace, Menlo, Consolas, monospace; font-size:13px;"></textarea>
    </div>

    <div class="row" style="justify-content:space-between; align-items:center;">
      <span id="le_count" class="hint">0 items</span>
      <div class="btns" style="margin:0;">
        <button id="le_copyBtn" class="dupeBtn">Copy</button>
        <button id="le_closeBtn" class="primary">Close</button>
      </div>
    </div>
  </div>
</div>
<!-- Field Swapper Modal -->
<div class="overlay" id="field-swapper-modal" aria-hidden="true">
  <div class="dialog" role="dialog" aria-modal="true" aria-labelledby="fsTitle">
    <div class="title" id="fsTitle">Field Swapper</div>
    <div class="hint">
      Drag to reorder. Double-click a name to edit. Applies to the whole document.
    </div>

    <div class="fs-list-wrap">
      <ul class="fs-list" id="fsList" aria-label="Field order"></ul>
    </div>

    <div class="btns" style="margin-top:12px;">
      <button id="fsCancelBtn">Cancel</button>
      <button id="fsApplyBtn" class="primary">Apply Order to Document</button>
    </div>
  </div>
</div>
<!-- Append/Prepend Modal -->
<div class="overlay" id="append-prepend-modal" aria-modal="true" role="dialog">
  <div class="dialog">
    <div class="title">Append / Prepend</div>
    <div class="hint">Operate across the entire document. If the chosen source/string is empty, that tuple is skipped.</div>

    <!-- A) Target = Target [Append/Prepend] × Field -->
    <div class="title" style="font-size:14px;margin:8px 0 6px;">A) Target field ⟵ target [Append/Prepend] × field</div>
    <div class="row">
      <label>Target field
        <input type="number" id="ap_target_field_f" min="1" value="1" style="width:90px;">
      </label>
      <label>Operation
        <select id="ap_op_f">
          <option value="append">Append</option>
          <option value="prepend">Prepend</option>
        </select>
      </label>
      <label>× Field
        <input type="number" id="ap_source_field" min="1" value="2" style="width:90px;">
      </label>
    </div>
    <div class="btns">
      <button id="ap_apply_field" class="primary">Apply Field → Target</button>
    </div>

    <div class="divider"></div>

    <!-- B) Target = Target [Append/Prepend] × String -->
    <div class="title" style="font-size:14px;margin:8px 0 6px;">B) Target field ⟵ target [Append/Prepend] × string</div>
    <div class="row">
      <label>Target field
        <input type="number" id="ap_target_field_s" min="1" value="1" style="width:90px;">
      </label>
      <label>Operation
        <select id="ap_op_s">
          <option value="append">Append</option>
          <option value="prepend">Prepend</option>
        </select>
      </label>
      <label>× String
        <input type="text" id="ap_string_input" placeholder="leave empty to skip">
      </label>
    </div>
    <div class="btns">
      <button id="ap_apply_string" class="primary">Apply String → Target</button>
      <button id="ap_close_btn">Close</button>
    </div>
  </div>
</div>
<!-- Template Maker Modal -->
<!-- Template Maker Modal -->
<div class="overlay" id="template-maker-modal" aria-modal="true" role="dialog">
  <div class="dialog">
    <div class="title">Template Maker</div>

    <!-- Shared options -->
    <div class="row" style="margin-bottom:6px;">
      <label>Field # (1-based)
        <input type="number" id="tmFieldIndex" min="1" value="1" style="width:100px;">
      </label>
      <label style="margin-left:8px;">
        <input type="checkbox" id="tmSepBlank" checked>
        Add blank line between copies
      </label>
    </div>

    <!-- Method 1 -->
    <div class="hint" style="margin-top:6px;"><b>Method 1 — Use Copy Board (CSV-aware)</b></div>
    <div class="hint">
      The <b>current set</b> becomes a <b>working template</b>. Keep caret at end of last tuple
      A copy is created for each item in the <b>Copy Board</b>, and that item is placed in the chosen
      <b>n’th field</b> of <em>every row</em> in that copy. All copies are appended to the end of the document.
    </div>
    <div class="btns" style="margin-top:8px;">
      <button id="tmApplyCBBtn" class="primary">Make Templates from Copy Board</button>
    </div>

    <div class="divider"></div>

    <!-- Method 2 -->
    <div class="hint"><b>Method 2 — One-per-line list</b></div>
    <div class="hint" style="margin-bottom:6px;">
      <i>Note:</i> Copy Board uses a CSV list. Place a <b>one-per-line</b> list here to maintain commas inside a field item.
    </div>
    <div class="row" style="margin-bottom:0;">
      <textarea id="tmListAlt" placeholder="one item per line…" style="width:100%;min-height:120px;background:var(--editor);color:var(--fg);border:1px solid var(--border);border-radius:8px;padding:10px;font-family: ui-monospace, Menlo, Consolas, monospace;line-height:1.4;"></textarea>
    </div>
    <div class="row">
      <small class="hint">
        Tip: The set is the block of non-blank lines around your caret. If the field index is larger than the row’s field count,
        that row is skipped (keeps the original row).
      </small>
    </div>
    <div class="btns">
      <button id="tmApplyLinesBtn" class="primary">Make Templates from Lines</button>
      <button id="tmCloseBtn">Close</button>
    </div>
  </div>
</div>
<!-- 2) MODAL (can be placed alongside your other modals) -->
<div class="overlay" id="field-paste-modal" aria-modal="true" role="dialog">
  <div class="dialog">
    <div class="title">Field → Paste</div>
    <div class="hint">Choose a mode, set scope (<code>doc</code> or set #), and provide a literal field list. <b>Literals are inserted verbatim</b>.</div>
    <div class="row" style="gap:12px;align-items:center;flex-wrap:wrap">
      <label style="display:flex;align-items:center;gap:6px">
        <input type="radio" name="fp_mode" id="fp_mode_insert" value="insert" checked>
        Insert after #
      </label>
      <input type="number" id="fp_after" min="0" value="0" style="width:90px;">
      <label style="display:flex;align-items:center;gap:6px;margin-left:16px">
        <input type="radio" name="fp_mode" id="fp_mode_overwrite" value="overwrite">
        Overwrite fields X–Y
      </label>
      <input type="number" id="fp_from" min="1" value="1" style="width:90px;">
      <span>to</span>
      <input type="number" id="fp_to" min="1" value="1" style="width:90px;">
      <label style="margin-left:16px">Scope
        <input type="text" id="fp_scope" placeholder="doc or set #" style="width:140px;">
      </label>
    </div>
    <div class="row">
      <label style="flex:1">Literal to insert / overwrite with
        <input type="text" id="fp_value" placeholder="e.g. 'apple', 'resources', 'JUlakjdfEEzaA'" style="width:100%">
      </label>
    </div>
    <div class="hint">For <b>Insert</b>: value is inserted as a single field verbatim. For <b>Overwrite</b>: you may provide <em>one or more fields</em> separated by commas (outside quotes) — they replace X..Y. Backslashes and sequences like <code>\'</code> are preserved.</div>
    <div class="btns">
      <button id="fp_cancel">Cancel</button>
      <button id="fp_apply" class="primary">Apply</button>
    </div>
  </div>
</div>
</div>
<!-- =============================
Tools → Field → Paste Modal
============================= -->
<div class="overlay" id="field-paste-modal" aria-modal="true" role="dialog">
  <div class="dialog">
    <div class="title">Field → Paste</div>
    <div class="hint">Choose a mode, set scope (<code>doc</code> or set #), and provide a literal field list. <b>Literals are inserted verbatim</b>.</div>

    <div class="row" style="gap:12px;align-items:center;flex-wrap:wrap">
      <label style="display:flex;align-items:center;gap:6px">
        <input type="radio" name="fp_mode" id="fp_mode_insert" value="insert" checked>
        Insert after #
      </label>
      <input type="number" id="fp_after" min="0" value="0" style="width:90px;">

      <label style="display:flex;align-items:center;gap:6px;margin-left:16px">
        <input type="radio" name="fp_mode" id="fp_mode_overwrite" value="overwrite">
        Overwrite fields X–Y
      </label>
      <input type="number" id="fp_from" min="1" value="1" style="width:90px;">
      <span>to</span>
      <input type="number" id="fp_to" min="1" value="1" style="width:90px;">

      <label style="margin-left:16px">Scope
        <input type="text" id="fp_scope" placeholder="doc or set #" style="width:140px;">
      </label>
    </div>

    <div class="row">
      <label style="flex:1">Literal to insert / overwrite with
        <input type="text" id="fp_value" placeholder="e.g. 'apple', 'resources', 'JUlakjdfEEzaA'" style="width:100%">
      </label>
    </div>
    <div class="hint">For <b>Insert</b>: value is inserted as a single field verbatim. For <b>Overwrite</b>: you may provide <em>one or more fields</em> separated by commas (outside quotes) — they replace X..Y. Backslashes and sequences like <code>\'</code> are preserved.</div>
    <div class="btns">
      <button id="fp_cancel">Cancel</button>
      <button id="fp_apply" class="primary">Apply</button>
    </div>
  </div>
</div>
</div>
<!-- Helpers: tuple parsing + editor line utilities -->
<!-- Helpers: tuple parsing + editor line utilities -->
<script id="helpers-duplicate-line-lib">
(function(){
  const H = {};

  H.getCurrentLineBounds = function(text, caret){
    const start = text.lastIndexOf("\n", Math.max(0, caret - 1)) + 1;
    const endNL = text.indexOf("\n", caret);
    const end = endNL === -1 ? text.length : endNL;
    return { start, end };
  };

  H.setCaretPreserveColumn = function(textarea, originalStart, originalLine, column){
    const newLineStart = originalStart + originalLine.length + 1; // after newline
    const newPos = newLineStart + Math.min(column, originalLine.length);
    textarea.selectionStart = textarea.selectionEnd = newPos;
    textarea.focus();
  };

  // SQL tuple parser: supports '' and \' in single-quoted strings; ignores commas inside strings
  H.parseSqlTupleLine = function(line){
    const leadingMatch = line.match(/^\s*/);
    const leading = leadingMatch ? leadingMatch[0] : "";
    const afterLead = line.slice(leading.length);

    const openIdxRel = afterLead.indexOf("(");
    if (openIdxRel === -1) return { ok:false };

    const openIdx = leading.length + openIdxRel;
    const s = line;
    let i = openIdx + 1;
    let inStr = false;
    let fields = [];
    let cur = "";

    function pushField(){ fields.push(cur.trim()); cur = ""; }

    for (; i < s.length; i++){
      const ch = s[i];

      if (inStr){
        if (ch === "\\"){
          if (i + 1 < s.length){
            cur += ch + s[i+1];
            i++;
            continue;
          }
        }
        if (ch === "'"){
          if (s[i+1] === "'"){
            cur += "''";
            i++;
            continue;
          } else {
            cur += ch;
            inStr = false;
            continue;
          }
        }
        cur += ch;
        continue;
      }

      if (ch === "'"){ inStr = true; cur += ch; continue; }
      if (ch === ","){ pushField(); continue; }
      if (ch === ")"){ pushField(); break; }

      cur += ch;
    }

    if (i >= s.length) return { ok:false };

    const closeIdx = i;
    const suffix = s.slice(closeIdx + 1);

    function reconstructed(newFields){
      return `${leading}(${newFields.join(", ")})${suffix}`;
    }

    return { ok:true, fields, leading, openIdx, closeIdx, suffix, reconstructed };
  };

  H.clearLastFieldSmart = function(fields){
    if (!fields.length) return fields;
    const f = fields[fields.length - 1].trim();
    const isLikelyString = f.startsWith("'") && f.endsWith("'");
    const isNumeric = /^[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/.test(f);

    if (isLikelyString){ fields[fields.length - 1] = "''"; }
    else if (isNumeric){ fields[fields.length - 1] = "0"; }
    else if (/^NULL$/i.test(f)){ fields[fields.length - 1] = "''"; }
    else { fields[fields.length - 1] = "''"; }
    return fields;
  };

  // Core duplicator
  H.duplicateCurrentLineInTextarea = function(ta, { clearLast } = { clearLast:false }){
    const text = ta.value;
    const caret = ta.selectionStart;
    const { start, end } = H.getCurrentLineBounds(text, caret);
    const line = text.slice(start, end);
    const column = caret - start;

    let duplicateLine = line;
    if (clearLast){
      const parsed = H.parseSqlTupleLine(line);
      if (parsed.ok){
        const fieldsCopy = parsed.fields.slice();
        H.clearLastFieldSmart(fieldsCopy);
        duplicateLine = parsed.reconstructed(fieldsCopy);
      }
    }

    const before = text.slice(0, end);
    const after  = text.slice(end);
    const insertion = (text[end] === "\n" ? "" : "\n") + duplicateLine;
    ta.value = before + insertion + after;

    H.setCaretPreserveColumn(ta, start, line, column);
  };

  // Expose
  window.DupHelpers = H;
})();
</script>

<!-- Feature: Duplicate line hotkeys (Ctrl+Shift+D primary, Ctrl+Alt+D backup; attempt Ctrl+D) -->
<script id="feature-duplicate-line-hotkey">
(function(){
  const ta = document.getElementById("textArea");
  if (!ta || !window.DupHelpers) return;

  const isClearLastEnabled = () => {
    const cb = document.getElementById("clearLastField");
    return !!(cb && cb.checked);
  };

  function isOurHotkey(e){
    const k = (e.key || "").toLowerCase();
    const ctrl = !!e.ctrlKey;
    const meta = !!e.metaKey; // mac
    const alt = !!e.altKey;
    const shift = !!e.shiftKey;

    // Primary: Ctrl+Shift+D (works universally)
    if (k === "d" && ctrl && shift && !alt && !meta) return "ctrlShiftD";
    // Backup: Ctrl+Alt+D
    if (k === "d" && ctrl && alt && !shift && !meta) return "ctrlAltD";
    // Attempt (may NOT override in most browsers): Ctrl+D
    if (k === "d" && ctrl && !alt && !shift && !meta) return "ctrlD";
    // Mac attempt (also reserved): Meta+D
    if (k === "d" && meta && !ctrl && !alt && !shift) return "metaD";

    return null;
  }

  // Capture early; try to beat default handlers
  document.addEventListener("keydown", function(e){
    const which = isOurHotkey(e);
    if (!which) return;

    // Only when cursor is in the main editor
    if (document.activeElement !== ta) return;

    // Try to block browser defaults (Ctrl+D/Meta+D still likely reserved)
    e.preventDefault();
    e.stopPropagation();
    if (typeof e.stopImmediatePropagation === "function") e.stopImmediatePropagation();

    DupHelpers.duplicateCurrentLineInTextarea(ta, { clearLast: isClearLastEnabled() });

  }, true);
})();
</script>
<script id="feature-set-pills-update">
(function(){
  const ta = document.getElementById("textArea");
  const rowsPill = document.getElementById("rowsCountPill");
  const setPill  = document.getElementById("setNumPill");
  if (!ta || !rowsPill || !setPill) return;

  // --- Split content into sets at fully blank lines
  function splitIntoSetsByBlankLine(text){
    const lines = text.split("\n");
    const sets = [];
    let cur = [];
    let startLine = 0;

    function pushSet(endLine){
      sets.push({ startLine, endLine, lines: cur.slice() });
      cur = [];
    }

    for (let i = 0; i < lines.length; i++){
      const ln = lines[i];
      if (ln.trim() === ""){
        if (cur.length) pushSet(i - 1);
        startLine = i + 1;
      } else {
        cur.push(ln);
      }
    }
    if (cur.length) pushSet(lines.length - 1);

    // Map each original line index to a set index
    const lineIndexToSet = new Array(lines.length).fill(-1);
    for (let s = 0; s < sets.length; s++){
      const { startLine, endLine } = sets[s];
      for (let i = startLine; i <= endLine; i++){
        lineIndexToSet[i] = s;
      }
    }
    // For blank lines, map to prior set if any
    for (let i = 0; i < lines.length; i++){
      if (lineIndexToSet[i] === -1){
        lineIndexToSet[i] = i > 0 ? lineIndexToSet[i - 1] : -1;
      }
    }
    return { sets, lineIndexToSet, totalLines: lines.length };
  }

  // --- Convert physical lines of a set into logical tuple rows
  // Handles: strings in single quotes with '' or \' escapes; parentheses depth outside strings
  function logicalRowsFromSetLines(lines){
    const rows = [];
    let buf = "";
    let depth = 0;
    let seenOpen = false;
    let inStr = false;

    function flush(){
      const t = buf.trim();
      if (t) rows.push(t);
      buf = "";
      depth = 0;
      seenOpen = false;
      inStr = false;
    }

    for (let li = 0; li < lines.length; li++){
      const s = lines[li];
      if (buf) buf += "\n";
      buf += s;

      for (let i = 0; i < s.length; i++){
        const ch = s[i];

        if (inStr){
          if (ch === "\\"){ // backslash escape: skip next char
            i++;
            continue;
          }
          if (ch === "'"){
            if (i + 1 < s.length && s[i + 1] === "'"){
              i++; // doubled apostrophe escape
              continue;
            } else {
              inStr = false; // end string
              continue;
            }
          }
          continue; // ignore tuple chars inside strings
        } else {
          if (ch === "'"){ inStr = true; continue; }
          if (ch === "("){ seenOpen = true; depth++; continue; }
          if (ch === ")"){
            if (depth > 0) depth--;
            if (depth === 0 && seenOpen){
              // Completed one tuple row (even if trailing chars exist)
              flush();
            }
            continue;
          }
        }
      }
    }

    if (buf.trim()) flush(); // leftover (possibly incomplete) row
    return rows;
  }

  // --- Map caret to line index
  function caretToLineIndex(text, caret){
    let count = 0;
    for (let i = 0; i < caret; i++){
      if (text.charCodeAt(i) === 10) count++; // '\n'
    }
    return count;
  }

  function computeAndRender(){
    const text = ta.value;
    const caret = ta.selectionStart ?? 0;

    const { sets, lineIndexToSet } = splitIntoSetsByBlankLine(text);
    const caretLine = caretToLineIndex(text, caret);
    let setIdx = lineIndexToSet[caretLine];
    if (setIdx < 0) setIdx = 0; // fallback when document empty

    const displaySet = sets.length ? (setIdx + 1) : 0;

    let rowCount = 0;
    if (sets[setIdx]){
      const logical = logicalRowsFromSetLines(sets[setIdx].lines);
      rowCount = logical.filter(r => r.trim() !== "").length;
    }

    rowsPill.textContent = `Set: ${rowCount} rows`;
    setPill.textContent  = `Set: ${displaySet} #`;
  }

  // Update on edits and caret moves
  ta.addEventListener("input", computeAndRender);
  ta.addEventListener("click", computeAndRender);
  ta.addEventListener("keyup", computeAndRender);
  document.addEventListener("selectionchange", function(){
    if (document.activeElement === ta) computeAndRender();
  });

  // Initial paint
  computeAndRender();
})();
</script>
<script id="menubar-popups">
(function(){
  // ===== Utilities
  const qsa = (sel, root=document) => Array.from(root.querySelectorAll(sel));
  const isEl = (x) => x && x.nodeType === 1;

  // Find the <ul> menu that a trigger controls (assumes it's the nextElementSibling)
  function menuForTrigger(btn){
    if (!isEl(btn)) return null;
    let next = btn.nextElementSibling;
    if (isEl(next) && next.matches(".appmenu, .appmenu-field")) return next;
    return null;
  }

  // Top-level <li.appmenu-item> for a trigger
  function topItemOf(trigger){
    return trigger?.closest(".appmenu-item") || null;
  }

  // Close ALL menus
  function closeAll(){
    qsa(".appmenu, .appmenu-field").forEach(ul => {
      ul.style.display = "none";
      ul.removeAttribute("data-open");
    });
    qsa(".appmenu-trigger").forEach(btn => {
      btn.setAttribute("aria-expanded", "false");
      btn.classList.remove("is-open");
    });
  }

  // Close all menus except one branch (e.g., keep a submenu open)
  function closeAllExcept(keep){
    qsa(".appmenu, .appmenu-field").forEach(ul => {
      if (ul === keep) return;
      if (keep && ul.contains(keep)) return;          // keep ancestors of keep
      if (keep && keep.contains(ul)) return;          // keep descendants of keep
      ul.style.display = "none";
      ul.removeAttribute("data-open");
    });
    qsa(".appmenu-trigger").forEach(btn => {
      const m = menuForTrigger(btn);
      const shouldStay =
        m === keep || (keep && (m && (m.contains(keep) || keep.contains(m))));
      btn.setAttribute("aria-expanded", shouldStay ? "true" : "false");
      btn.classList.toggle("is-open", !!shouldStay);
    });
  }

  // Open a specific trigger's menu
  function openMenu(trigger){
    const menu = menuForTrigger(trigger);
    if (!menu) return;
    // close others at same level
    const root = document.querySelector(".menubar");
    const sameLevelMenus = qsa(".appmenu, .appmenu-field", root).filter(ul => {
      // different branch = close
      return !(menu === ul || menu.contains(ul) || ul.contains(menu));
    });
    sameLevelMenus.forEach(ul => { ul.style.display = "none"; ul.removeAttribute("data-open"); });

    trigger.setAttribute("aria-expanded", "true");
    trigger.classList.add("is-open");
    menu.style.display = "block";
    menu.setAttribute("data-open", "true");
    ensureInViewport(menu);
  }

  // Toggle a trigger's menu
  function toggleMenu(trigger){
    const menu = menuForTrigger(trigger);
    if (!menu) return;
    const isOpen = menu.getAttribute("data-open") === "true" || menu.style.display === "block";
    if (isOpen){
      // Close this branch only
      menu.style.display = "none";
      menu.removeAttribute("data-open");
      trigger.setAttribute("aria-expanded", "false");
      trigger.classList.remove("is-open");
    } else {
      openMenu(trigger);
    }
  }

  // Slight nudge to keep dropdowns onscreen horizontally
  function ensureInViewport(menu){
    const r = menu.getBoundingClientRect();
    const pad = 8;
    if (r.right > window.innerWidth - pad){
      const shift = r.right - (window.innerWidth - pad);
      menu.style.left = (menu.offsetLeft - shift) + "px";
    }
    if (menu.classList.contains("appmenu-field")){
      // submenus open to the right; if overflowing, flip to left
      const rr = menu.getBoundingClientRect();
      if (rr.right > window.innerWidth - pad){
        menu.style.left = "auto";
        menu.style.right = "100%";
        menu.style.marginLeft = "0";
        menu.style.marginRight = "4px";
      } else {
        menu.style.right = "auto";
      }
    }
  }

  // ===== Mouse: clicks on triggers
  document.addEventListener("click", (e)=>{
    const btn = e.target.closest(".appmenu-trigger");
    if (btn){
      e.preventDefault();
      e.stopPropagation();
      toggleMenu(btn);
      return;
    }
    // Clicked outside any menu → close all
    if (!e.target.closest(".menubar")){
      closeAll();
    }
  });

  // ===== Hover for nested submenus (keeps style-only feel)
  // Open submenu when hovering its trigger; close when leaving its li
  qsa(".appmenu-nested").forEach(li=>{
    const trig = li.querySelector(".appmenu-trigger.nested");
    const sub  = li.querySelector(".appmenu-field");
    if (!trig || !sub) return;

    li.addEventListener("mouseenter", ()=>{
      // keep parent branch open
      trig.setAttribute("aria-expanded", "true");
      trig.classList.add("is-open");
      sub.style.display = "block";
      sub.setAttribute("data-open", "true");
      ensureInViewport(sub);
    });
    li.addEventListener("mouseleave", ()=>{
      sub.style.display = "none";
      sub.removeAttribute("data-open");
      trig.setAttribute("aria-expanded", "false");
      trig.classList.remove("is-open");
    });
  });

  // ===== Keyboard support
  // Open/close with Enter/Space; Escape closes all; Arrow navigation between top-level menus
  document.addEventListener("keydown", (e)=>{
    const active = document.activeElement;
    const isTrigger = active && active.classList && active.classList.contains("appmenu-trigger");

    // Escape → close all
    if (e.key === "Escape"){
      closeAll();
      return;
    }

    // Enter/Space on a trigger → toggle
    if (isTrigger && (e.key === "Enter" || e.key === " ")){
      e.preventDefault();
      toggleMenu(active);
      return;
    }

    // Arrow navigation between top-level triggers
    if (isTrigger && (e.key === "ArrowRight" || e.key === "ArrowLeft")){
      e.preventDefault();
      const top = active.closest(".menubar");
      const triggers = qsa(".appmenu-root > .appmenu-item > .appmenu-trigger", top);
      const idx = triggers.indexOf(active);
      if (idx !== -1){
        const nextIdx = e.key === "ArrowRight"
          ? (idx + 1) % triggers.length
          : (idx - 1 + triggers.length) % triggers.length;
        triggers[nextIdx].focus();
        // If a menu is already open, keep the bar “rolling” by opening the next one
        const anyOpen = qsa(".appmenu[data-open='true'], .appmenu-field[data-open='true']").length > 0;
        if (anyOpen){
          openMenu(triggers[nextIdx]);
        }
      }
      return;
    }

    // ArrowDown on a trigger → open its menu
    if (isTrigger && e.key === "ArrowDown"){
      e.preventDefault();
      openMenu(active);
      // Focus first item inside if you like (style-only right now we skip focusing)
      return;
    }
  });

  // Close on window resize (prevents odd positioning after layout changes)
  window.addEventListener("resize", closeAll);

  // Accessibility attributes (light touch)
  qsa(".appmenu-trigger").forEach(btn=>{
    btn.setAttribute("aria-haspopup", "true");
    btn.setAttribute("aria-expanded", "false");
  });

})();
</script>
<script id="feature-help-settings-popups">
(function(){
  // ===== helpers =====
  function $(id){ return document.getElementById(id); }
  function openOverlay(overlay){
    if (!overlay) return;
    overlay.style.display = "flex";
    overlay.setAttribute("data-open","true");
    overlay.removeAttribute("aria-hidden");

    // focus first focusable control in dialog
    const dlg = overlay.querySelector(".dialog");
    const focusable = dlg && dlg.querySelector(
      "button, [href], input, select, textarea, [tabindex]:not([tabindex='-1'])"
    );
    if (focusable) focusable.focus();

    // optional: prevent background scroll
    document.documentElement.style.overflow = "hidden";
  }
  function closeOverlay(overlay){
    if (!overlay) return;
    overlay.style.display = "none";
    overlay.removeAttribute("data-open");
    overlay.setAttribute("aria-hidden","true");
    // restore scroll when no overlays open
    if (document.querySelectorAll('.overlay[data-open="true"]').length === 0){
      document.documentElement.style.overflow = "";
    }
  }
  function bindOpen(btn, overlay){
    if (!btn || !overlay) return;
    btn.addEventListener("click", (e)=>{
      e.preventDefault();
      openOverlay(overlay);
    });
  }
  function bindClose(btn, overlay){
    if (!btn || !overlay) return;
    btn.addEventListener("click", (e)=>{
      e.preventDefault();
      closeOverlay(overlay);
    });
  }

  // ===== get elements =====
  const settingsBtn        = $("settingsBtn");
  const helpBtn            = $("helpBtn");
  const mnuHelp            = $("mnuHelp");
  const mnuAbout           = $("mnuAbout");

  const settingsOverlay    = $("settings-modal");
  const helpOverlay        = $("about-modal");       // “About / Help Modal” in your file
  const aboutInfoOverlay   = $("about-info-modal");  // “Software information” modal

  const settingsCloseBtn   = $("settingsCloseBtn");
  const aboutCloseBtn      = $("aboutCloseBtn");
  const aboutInfoCloseBtn  = $("aboutInfoCloseBtn");

  // ===== wire openers =====
  bindOpen(settingsBtn, settingsOverlay);
  bindOpen(helpBtn,     helpOverlay);      // toolbar help button → Help modal
  bindOpen(mnuHelp,     helpOverlay);      // menubar Help → Help modal
  bindOpen(mnuAbout,    aboutInfoOverlay); // menubar About → About/Info modal

  // ===== wire closers =====
  bindClose(settingsCloseBtn, settingsOverlay);
  bindClose(aboutCloseBtn,    helpOverlay);
  bindClose(aboutInfoCloseBtn,aboutInfoOverlay);

  // click outside dialog (on backdrop) closes
  [settingsOverlay, helpOverlay, aboutInfoOverlay].forEach(ov=>{
    if (!ov) return;
    ov.addEventListener("click", (e)=>{
      // close only if click is on the backdrop, not inside .dialog
      if (e.target === ov) closeOverlay(ov);
    });
  });

  // ESC closes the top-most open overlay
  document.addEventListener("keydown", (e)=>{
    if (e.key !== "Escape") return;
    const openOverlays = Array.from(document.querySelectorAll('.overlay[data-open="true"]'));
    if (!openOverlays.length) return;
    // last one in DOM order is "top" enough for our case
    closeOverlay(openOverlays[openOverlays.length - 1]);
  });

  // optional: close menus when a modal opens (if you’re using the menubar JS)
  document.addEventListener("click", (e)=>{
    const opener = e.target.closest("#settingsBtn, #helpBtn, #mnuHelp, #mnuAbout");
    if (opener){
      // if you used the menubar script earlier, this will close any open menus:
      document.querySelectorAll(".appmenu, .appmenu-field").forEach(m=> m.style.display="none");
      document.querySelectorAll(".appmenu-trigger").forEach(b=> { b.classList.remove("is-open"); b.setAttribute("aria-expanded","false"); });
    }
  });
})();
</script>
<script id="settings-duplicate-feature">
(function(){
  const STORAGE_KEY = "dup.clearLastField";

  // 1) Wire the checkbox and persistence
  const cb = document.getElementById("clearLastField");
  if (cb){
    // Load saved state (default: unchecked/false)
    try {
      const saved = localStorage.getItem(STORAGE_KEY);
      if (saved !== null) cb.checked = saved === "1";
    } catch(_) {}

    // Save on change
    cb.addEventListener("change", () => {
      try { localStorage.setItem(STORAGE_KEY, cb.checked ? "1" : "0"); } catch(_) {}
    });
  }

  // 2) Override the duplicate helper’s clear routine to match the new rule
  //    If last field is a string → set to '' ; if number → do nothing.
  function clearLastFieldStringsOnly(fields){
    if (!Array.isArray(fields) || !fields.length) return fields;
    const idx = fields.length - 1;
    const f = (fields[idx] ?? "").toString().trim();

    // Heuristic: single-quoted string (our tuple parser already respects escaped quotes)
    const isString = f.startsWith("'") && f.endsWith("'");

    // Numeric detection (keep identical to previous numeric regex so behavior is consistent)
    const isNumeric = /^[+-]?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?$/.test(f);

    if (isString) {
      fields[idx] = "''";
    } else if (isNumeric) {
      // Do nothing for numbers per new requirement
      fields[idx] = fields[idx];
    } else {
      // Non-string, non-number → do nothing under the new rule
      fields[idx] = fields[idx];
    }
    return fields;
  }

  // 3) If the earlier helpers are present, swap in the new behavior
  if (window.DupHelpers){
    window.DupHelpers.clearLastFieldSmart = clearLastFieldStringsOnly;
  }

  // 4) Nothing else to wire: the duplicate feature already checks #clearLastField
  //    via its isClearLastEnabled() and uses DupHelpers.clearLastFieldSmart().
})();
</script>
</body>
</html>
